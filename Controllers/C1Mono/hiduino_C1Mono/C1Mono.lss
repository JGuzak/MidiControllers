
C1Mono.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000f78  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a35  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a9  00000000  00000000  00005c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f83  00000000  00000000  00006d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  00009c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000236a  00000000  00000000  0000a38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ce2  00000000  00000000  0000c6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	eb c0       	rjmp	.+470    	; 0x1d8 <__ctors_end>
   2:	00 00       	nop
   4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
   6:	00 00       	nop
   8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
   a:	00 00       	nop
   c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
   e:	00 00       	nop
  10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
  12:	00 00       	nop
  14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
  16:	00 00       	nop
  18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
  1e:	00 00       	nop
  20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
  22:	00 00       	nop
  24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
  26:	00 00       	nop
  28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	58 c5       	rjmp	.+2736   	; 0xade <__vector_11>
  2e:	00 00       	nop
  30:	ee c0       	rjmp	.+476    	; 0x20e <__bad_interrupt>
  32:	00 00       	nop
  34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
  36:	00 00       	nop
  38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
  3e:	00 00       	nop
  40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
  42:	00 00       	nop
  44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
  46:	00 00       	nop
  48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
  4e:	00 00       	nop
  50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
  52:	00 00       	nop
  54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
  56:	00 00       	nop
  58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e3 c1       	rjmp	.+966    	; 0x424 <__vector_23>
  5e:	00 00       	nop
  60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
  62:	00 00       	nop
  64:	d4 c0       	rjmp	.+424    	; 0x20e <__bad_interrupt>
  66:	00 00       	nop
  68:	d2 c0       	rjmp	.+420    	; 0x20e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
  6e:	00 00       	nop
  70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	10 03 43 00 31 00 20 00 4d 00 6f 00 6e 00 6f 00     ..C.1. .M.o.n.o.
  84:	00 00                                               ..

00000086 <ManufacturerString>:
  86:	d4 03 54 00 77 00 6f 00 20 00 77 00 61 00 79 00     ..T.w.o. .w.a.y.
  96:	20 00 63 00 6f 00 6d 00 6d 00 75 00 6e 00 69 00      .c.o.m.m.u.n.i.
  a6:	63 00 61 00 74 00 69 00 6f 00 6e 00 20 00 75 00     c.a.t.i.o.n. .u.
  b6:	73 00 62 00 20 00 6d 00 69 00 64 00 69 00 20 00     s.b. .m.i.d.i. .
  c6:	63 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00 6c 00     c.o.n.t.r.o.l.l.
  d6:	65 00 72 00 20 00 66 00 6f 00 72 00 20 00 70 00     e.r. .f.o.r. .p.
  e6:	72 00 6f 00 64 00 75 00 63 00 74 00 69 00 6f 00     r.o.d.u.c.t.i.o.
  f6:	6e 00 20 00 61 00 6e 00 64 00 20 00 6c 00 69 00     n. .a.n.d. .l.i.
 106:	76 00 65 00 20 00 70 00 65 00 72 00 66 00 6f 00     v.e. .p.e.r.f.o.
 116:	72 00 6d 00 61 00 6e 00 63 00 65 00 20 00 64 00     r.m.a.n.c.e. .d.
 126:	65 00 73 00 69 00 67 00 6e 00 65 00 64 00 20 00     e.s.i.g.n.e.d. .
 136:	61 00 6e 00 64 00 20 00 62 00 75 00 69 00 6c 00     a.n.d. .b.u.i.l.
 146:	74 00 20 00 62 00 79 00 20 00 41 00 4f 00 54 00     t. .b.y. .A.O.T.
 156:	41 00 2e 00 00 00                                   A.....

0000015c <LanguageString>:
 15c:	04 03 09 04                                         ....

00000160 <ConfigurationDescriptor>:
 160:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
 170:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 180:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 190:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 1a0:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
 1b0:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
 1c0:	05 25 01 01 03                                      .%...

000001c5 <DeviceDescriptor>:
 1c5:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 1d5:	00 01 00                                            ...

000001d8 <__ctors_end>:
 1d8:	11 24       	eor	r1, r1
 1da:	1f be       	out	0x3f, r1	; 63
 1dc:	cf ef       	ldi	r28, 0xFF	; 255
 1de:	d2 e0       	ldi	r29, 0x02	; 2
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	cd bf       	out	0x3d, r28	; 61

000001e4 <__do_copy_data>:
 1e4:	11 e0       	ldi	r17, 0x01	; 1
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b1 e0       	ldi	r27, 0x01	; 1
 1ea:	e4 e0       	ldi	r30, 0x04	; 4
 1ec:	ff e0       	ldi	r31, 0x0F	; 15
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <__do_copy_data+0x10>
 1f0:	05 90       	lpm	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	a0 30       	cpi	r26, 0x00	; 0
 1f6:	b1 07       	cpc	r27, r17
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <__do_copy_data+0xc>

000001fa <__do_clear_bss>:
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	a0 e0       	ldi	r26, 0x00	; 0
 1fe:	b1 e0       	ldi	r27, 0x01	; 1
 200:	01 c0       	rjmp	.+2      	; 0x204 <.do_clear_bss_start>

00000202 <.do_clear_bss_loop>:
 202:	1d 92       	st	X+, r1

00000204 <.do_clear_bss_start>:
 204:	ad 31       	cpi	r26, 0x1D	; 29
 206:	b2 07       	cpc	r27, r18
 208:	e1 f7       	brne	.-8      	; 0x202 <.do_clear_bss_loop>
 20a:	cb d0       	rcall	.+406    	; 0x3a2 <main>
 20c:	79 c6       	rjmp	.+3314   	; 0xf00 <_exit>

0000020e <__bad_interrupt>:
 20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <SetupHardware>:
}

uint8_t getChannelFromStatusByte(uint8_t inStatus)
{
	return (inStatus & 0x0f) + 1;
}
 210:	84 b7       	in	r24, 0x34	; 52
 212:	87 7f       	andi	r24, 0xF7	; 247
 214:	84 bf       	out	0x34, r24	; 52
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	a8 95       	wdr
 21c:	80 91 60 00 	lds	r24, 0x0060
 220:	88 61       	ori	r24, 0x18	; 24
 222:	80 93 60 00 	sts	0x0060, r24
 226:	10 92 60 00 	sts	0x0060, r1
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 cd 00 	sts	0x00CD, r25
 234:	80 93 cc 00 	sts	0x00CC, r24
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 93 ca 00 	sts	0x00CA, r24
 23e:	10 92 c8 00 	sts	0x00C8, r1
 242:	e9 ec       	ldi	r30, 0xC9	; 201
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	88 e1       	ldi	r24, 0x18	; 24
 248:	80 83       	st	Z, r24
 24a:	53 9a       	sbi	0x0a, 3	; 10
 24c:	5a 9a       	sbi	0x0b, 2	; 11
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	85 bd       	out	0x25, r24	; 37
 252:	10 82       	st	Z, r1
 254:	88 e9       	ldi	r24, 0x98	; 152
 256:	80 83       	st	Z, r24
 258:	46 9a       	sbi	0x08, 6	; 8
 25a:	3e 9a       	sbi	0x07, 6	; 7
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	80 93 61 00 	sts	0x0061, r24
 268:	90 93 61 00 	sts	0x0061, r25
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	8a b1       	in	r24, 0x0a	; 10
 270:	80 63       	ori	r24, 0x30	; 48
 272:	8a b9       	out	0x0a, r24	; 10
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	80 63       	ori	r24, 0x30	; 48
 278:	8b b9       	out	0x0b, r24	; 11
 27a:	22 c4       	rjmp	.+2116   	; 0xac0 <USB_Init>

0000027c <EVENT_USB_Device_Connect>:
 27c:	8b b1       	in	r24, 0x0b	; 11
 27e:	80 63       	ori	r24, 0x30	; 48
 280:	8f 7d       	andi	r24, 0xDF	; 223
 282:	8b b9       	out	0x0b, r24	; 11
 284:	08 95       	ret

00000286 <EVENT_USB_Device_Disconnect>:
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	80 63       	ori	r24, 0x30	; 48
 28a:	8f 7e       	andi	r24, 0xEF	; 239
 28c:	8b b9       	out	0x0b, r24	; 11
 28e:	08 95       	ret

00000290 <EVENT_USB_Device_ConfigurationChanged>:
 290:	cf 93       	push	r28
 292:	42 e3       	ldi	r20, 0x32	; 50
 294:	61 e8       	ldi	r22, 0x81	; 129
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	54 d3       	rcall	.+1704   	; 0x942 <Endpoint_ConfigureEndpoint_Prv>
 29a:	c8 2f       	mov	r28, r24
 29c:	42 e3       	ldi	r20, 0x32	; 50
 29e:	60 e8       	ldi	r22, 0x80	; 128
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	4f d3       	rcall	.+1694   	; 0x942 <Endpoint_ConfigureEndpoint_Prv>
 2a4:	88 23       	and	r24, r24
 2a6:	11 f0       	breq	.+4      	; 0x2ac <EVENT_USB_Device_ConfigurationChanged+0x1c>
 2a8:	c1 11       	cpse	r28, r1
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <EVENT_USB_Device_ConfigurationChanged+0x20>
 2ac:	90 e1       	ldi	r25, 0x10	; 16
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <EVENT_USB_Device_ConfigurationChanged+0x22>
 2b0:	90 e2       	ldi	r25, 0x20	; 32
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	90 95       	com	r25
 2b6:	80 63       	ori	r24, 0x30	; 48
 2b8:	89 23       	and	r24, r25
 2ba:	8b b9       	out	0x0b, r24	; 11
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <MIDI_To_Host>:
 2c0:	80 91 14 01 	lds	r24, 0x0114
 2c4:	84 30       	cpi	r24, 0x04	; 4
 2c6:	41 f5       	brne	.+80     	; 0x318 <__stack+0x19>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 e9 00 	sts	0x00E9, r24
 2ce:	80 91 e8 00 	lds	r24, 0x00E8
 2d2:	80 ff       	sbrs	r24, 0
 2d4:	21 c0       	rjmp	.+66     	; 0x318 <__stack+0x19>
 2d6:	80 91 08 01 	lds	r24, 0x0108
 2da:	88 23       	and	r24, r24
 2dc:	e9 f0       	breq	.+58     	; 0x318 <__stack+0x19>
 2de:	10 92 08 01 	sts	0x0108, r1
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	64 e0       	ldi	r22, 0x04	; 4
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	d7 d1       	rcall	.+942    	; 0x69e <Endpoint_Write_Stream_LE>
 2f0:	10 92 04 01 	sts	0x0104, r1
 2f4:	10 92 05 01 	sts	0x0105, r1
 2f8:	10 92 06 01 	sts	0x0106, r1
 2fc:	10 92 07 01 	sts	0x0107, r1
 300:	80 91 e8 00 	lds	r24, 0x00E8
 304:	8e 77       	andi	r24, 0x7E	; 126
 306:	80 93 e8 00 	sts	0x00E8, r24
 30a:	5d 98       	cbi	0x0b, 5	; 11
 30c:	88 e8       	ldi	r24, 0x88	; 136
 30e:	93 e1       	ldi	r25, 0x13	; 19
 310:	90 93 03 01 	sts	0x0103, r25
 314:	80 93 02 01 	sts	0x0102, r24
 318:	08 95       	ret

0000031a <MIDI_To_Arduino>:
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	00 d0       	rcall	.+0      	; 0x320 <MIDI_To_Arduino+0x6>
 320:	00 d0       	rcall	.+0      	; 0x322 <MIDI_To_Arduino+0x8>
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	80 91 14 01 	lds	r24, 0x0114
 32a:	84 30       	cpi	r24, 0x04	; 4
 32c:	99 f5       	brne	.+102    	; 0x394 <MIDI_To_Arduino+0x7a>
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	80 93 e9 00 	sts	0x00E9, r24
 334:	80 91 e8 00 	lds	r24, 0x00E8
 338:	82 ff       	sbrs	r24, 2
 33a:	2c c0       	rjmp	.+88     	; 0x394 <MIDI_To_Arduino+0x7a>
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	f4 d1       	rcall	.+1000   	; 0x732 <Endpoint_Read_Stream_LE>
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	90 91 c8 00 	lds	r25, 0x00C8
 350:	95 ff       	sbrs	r25, 5
 352:	fc cf       	rjmp	.-8      	; 0x34c <MIDI_To_Arduino+0x32>
 354:	80 93 ce 00 	sts	0x00CE, r24
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	90 91 c8 00 	lds	r25, 0x00C8
 35e:	95 ff       	sbrs	r25, 5
 360:	fc cf       	rjmp	.-8      	; 0x35a <MIDI_To_Arduino+0x40>
 362:	80 93 ce 00 	sts	0x00CE, r24
 366:	8c 81       	ldd	r24, Y+4	; 0x04
 368:	90 91 c8 00 	lds	r25, 0x00C8
 36c:	95 ff       	sbrs	r25, 5
 36e:	fc cf       	rjmp	.-8      	; 0x368 <MIDI_To_Arduino+0x4e>
 370:	80 93 ce 00 	sts	0x00CE, r24
 374:	5c 98       	cbi	0x0b, 4	; 11
 376:	88 e8       	ldi	r24, 0x88	; 136
 378:	93 e1       	ldi	r25, 0x13	; 19
 37a:	90 93 01 01 	sts	0x0101, r25
 37e:	80 93 00 01 	sts	0x0100, r24
 382:	80 91 f2 00 	lds	r24, 0x00F2
 386:	81 11       	cpse	r24, r1
 388:	05 c0       	rjmp	.+10     	; 0x394 <MIDI_To_Arduino+0x7a>
 38a:	80 91 e8 00 	lds	r24, 0x00E8
 38e:	8b 77       	andi	r24, 0x7B	; 123
 390:	80 93 e8 00 	sts	0x00E8, r24
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <main>:
 3a2:	36 df       	rcall	.-404    	; 0x210 <SetupHardware>
 3a4:	78 94       	sei
 3a6:	78 94       	sei
 3a8:	80 91 02 01 	lds	r24, 0x0102
 3ac:	90 91 03 01 	lds	r25, 0x0103
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	31 f0       	breq	.+12     	; 0x3c0 <main+0x1e>
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	90 93 03 01 	sts	0x0103, r25
 3ba:	80 93 02 01 	sts	0x0102, r24
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <main+0x20>
 3c0:	5d 9a       	sbi	0x0b, 5	; 11
 3c2:	80 91 00 01 	lds	r24, 0x0100
 3c6:	90 91 01 01 	lds	r25, 0x0101
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	31 f0       	breq	.+12     	; 0x3da <main+0x38>
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	90 93 01 01 	sts	0x0101, r25
 3d4:	80 93 00 01 	sts	0x0100, r24
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <main+0x3a>
 3da:	5c 9a       	sbi	0x0b, 4	; 11
 3dc:	9e df       	rcall	.-196    	; 0x31a <MIDI_To_Arduino>
 3de:	70 df       	rcall	.-288    	; 0x2c0 <MIDI_To_Host>
 3e0:	75 d5       	rcall	.+2794   	; 0xecc <USB_USBTask>
 3e2:	e2 cf       	rjmp	.-60     	; 0x3a8 <main+0x6>

000003e4 <getTypeFromStatusByte>:
 3e4:	87 ff       	sbrs	r24, 7
 3e6:	0c c0       	rjmp	.+24     	; 0x400 <getTypeFromStatusByte+0x1c>
 3e8:	9c e0       	ldi	r25, 0x0C	; 12
 3ea:	98 0f       	add	r25, r24
 3ec:	92 30       	cpi	r25, 0x02	; 2
 3ee:	40 f0       	brcs	.+16     	; 0x400 <getTypeFromStatusByte+0x1c>
 3f0:	98 2f       	mov	r25, r24
 3f2:	9b 7f       	andi	r25, 0xFB	; 251
 3f4:	99 3f       	cpi	r25, 0xF9	; 249
 3f6:	21 f0       	breq	.+8      	; 0x400 <getTypeFromStatusByte+0x1c>
 3f8:	80 3f       	cpi	r24, 0xF0	; 240
 3fa:	18 f4       	brcc	.+6      	; 0x402 <getTypeFromStatusByte+0x1e>
 3fc:	80 7f       	andi	r24, 0xF0	; 240
 3fe:	08 95       	ret
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret

00000404 <isChannelMessage>:
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
 404:	98 2f       	mov	r25, r24
 406:	9f 7e       	andi	r25, 0xEF	; 239
 408:	28 2f       	mov	r18, r24
 40a:	2f 7c       	andi	r18, 0xCF	; 207
 40c:	20 38       	cpi	r18, 0x80	; 128
 40e:	39 f0       	breq	.+14     	; 0x41e <isChannelMessage+0x1a>
{
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
 410:	80 3e       	cpi	r24, 0xE0	; 224
 412:	29 f0       	breq	.+10     	; 0x41e <isChannelMessage+0x1a>
            inType == PitchBend         ||
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 3c       	cpi	r25, 0xC0	; 192
 418:	19 f0       	breq	.+6      	; 0x420 <isChannelMessage+0x1c>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	01 c0       	rjmp	.+2      	; 0x420 <isChannelMessage+0x1c>
 41e:	81 e0       	ldi	r24, 0x01	; 1
            inType == ProgramChange);
}
 420:	81 70       	andi	r24, 0x01	; 1
 422:	08 95       	ret

00000424 <__vector_23>:

}

// Parse via Arduino/Serial
ISR(USART1_RX_vect, ISR_BLOCK) 
{
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	2f 93       	push	r18
 430:	3f 93       	push	r19
 432:	4f 93       	push	r20
 434:	5f 93       	push	r21
 436:	6f 93       	push	r22
 438:	7f 93       	push	r23
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	af 93       	push	r26
 440:	bf 93       	push	r27
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
	// Device must be connected and configured for the task to run
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
 44a:	80 91 14 01 	lds	r24, 0x0114
 44e:	84 30       	cpi	r24, 0x04	; 4
 450:	09 f0       	breq	.+2      	; 0x454 <__vector_23+0x30>
 452:	e0 c0       	rjmp	.+448    	; 0x614 <__vector_23+0x1f0>

	const uint8_t extracted = UDR1;
 454:	c0 91 ce 00 	lds	r28, 0x00CE

	// Borrowed + Modified from Francois Best's Arduino MIDI Library
	// https://github.com/FortySevenEffects/arduino_midi_library
    if (mPendingMessageIndex == 0)
 458:	80 91 0b 01 	lds	r24, 0x010B
 45c:	81 11       	cpse	r24, r1
 45e:	78 c0       	rjmp	.+240    	; 0x550 <__vector_23+0x12c>
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
 460:	c0 93 0d 01 	sts	0x010D, r28

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
 464:	d0 91 0a 01 	lds	r29, 0x010A
 468:	8d 2f       	mov	r24, r29
 46a:	bc df       	rcall	.-136    	; 0x3e4 <getTypeFromStatusByte>
 46c:	cb df       	rcall	.-106    	; 0x404 <isChannelMessage>
 46e:	88 23       	and	r24, r24
 470:	49 f0       	breq	.+18     	; 0x484 <__vector_23+0x60>
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it to the pending message
            if (extracted < 0x80)
 472:	c7 fd       	sbrc	r28, 7
 474:	07 c0       	rjmp	.+14     	; 0x484 <__vector_23+0x60>
            {
                mPendingMessage[0]   = mRunningStatus_RX;
 476:	d0 93 0d 01 	sts	0x010D, r29
                mPendingMessage[1]   = extracted;
 47a:	c0 93 0e 01 	sts	0x010E, r28
                mPendingMessageIndex = 1;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 0b 01 	sts	0x010B, r24
            }
            // Else we received another status byte, so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
 484:	c0 91 0d 01 	lds	r28, 0x010D
 488:	8c 2f       	mov	r24, r28
 48a:	ac df       	rcall	.-168    	; 0x3e4 <getTypeFromStatusByte>
 48c:	81 3f       	cpi	r24, 0xF1	; 241
 48e:	91 f1       	breq	.+100    	; 0x4f4 <__vector_23+0xd0>
 490:	88 f4       	brcc	.+34     	; 0x4b4 <__vector_23+0x90>
 492:	80 3b       	cpi	r24, 0xB0	; 176
 494:	89 f1       	breq	.+98     	; 0x4f8 <__vector_23+0xd4>
 496:	38 f4       	brcc	.+14     	; 0x4a6 <__vector_23+0x82>
 498:	80 39       	cpi	r24, 0x90	; 144
 49a:	71 f1       	breq	.+92     	; 0x4f8 <__vector_23+0xd4>
 49c:	80 3a       	cpi	r24, 0xA0	; 160
 49e:	61 f1       	breq	.+88     	; 0x4f8 <__vector_23+0xd4>
 4a0:	80 38       	cpi	r24, 0x80	; 128
 4a2:	69 f5       	brne	.+90     	; 0x4fe <__vector_23+0xda>
 4a4:	29 c0       	rjmp	.+82     	; 0x4f8 <__vector_23+0xd4>
 4a6:	80 3d       	cpi	r24, 0xD0	; 208
 4a8:	29 f1       	breq	.+74     	; 0x4f4 <__vector_23+0xd0>
 4aa:	80 3e       	cpi	r24, 0xE0	; 224
 4ac:	29 f1       	breq	.+74     	; 0x4f8 <__vector_23+0xd4>
 4ae:	80 3c       	cpi	r24, 0xC0	; 192
 4b0:	31 f5       	brne	.+76     	; 0x4fe <__vector_23+0xda>
 4b2:	20 c0       	rjmp	.+64     	; 0x4f4 <__vector_23+0xd0>
 4b4:	88 3f       	cpi	r24, 0xF8	; 248
 4b6:	69 f0       	breq	.+26     	; 0x4d2 <__vector_23+0xae>
 4b8:	30 f4       	brcc	.+12     	; 0x4c6 <__vector_23+0xa2>
 4ba:	83 3f       	cpi	r24, 0xF3	; 243
 4bc:	d9 f0       	breq	.+54     	; 0x4f4 <__vector_23+0xd0>
 4be:	e0 f0       	brcs	.+56     	; 0x4f8 <__vector_23+0xd4>
 4c0:	86 3f       	cpi	r24, 0xF6	; 246
 4c2:	39 f0       	breq	.+14     	; 0x4d2 <__vector_23+0xae>
 4c4:	1c c0       	rjmp	.+56     	; 0x4fe <__vector_23+0xda>
 4c6:	8a 3f       	cpi	r24, 0xFA	; 250
 4c8:	d0 f0       	brcs	.+52     	; 0x4fe <__vector_23+0xda>
 4ca:	8d 3f       	cpi	r24, 0xFD	; 253
 4cc:	10 f0       	brcs	.+4      	; 0x4d2 <__vector_23+0xae>
 4ce:	8e 3f       	cpi	r24, 0xFE	; 254
 4d0:	b0 f0       	brcs	.+44     	; 0x4fe <__vector_23+0xda>
            case Clock:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
            	mCompleteMessage.Event 	 = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 4d2:	8f e0       	ldi	r24, 0x0F	; 15
 4d4:	80 93 04 01 	sts	0x0104, r24
                mCompleteMessage.Data1   = mPendingMessage[0];
 4d8:	c0 93 05 01 	sts	0x0105, r28
                mCompleteMessage.Data2   = 0;
 4dc:	10 92 06 01 	sts	0x0106, r1
                mCompleteMessage.Data3   = 0;
 4e0:	10 92 07 01 	sts	0x0107, r1
                mPendingMessageValid  	 = true;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	80 93 08 01 	sts	0x0108, r24

                // We still need to reset these
                mPendingMessageIndex = 0;
 4ea:	10 92 0b 01 	sts	0x010B, r1
                mPendingMessageExpectedLength = 0;
 4ee:	10 92 09 01 	sts	0x0109, r1

                return;
 4f2:	90 c0       	rjmp	.+288    	; 0x614 <__vector_23+0x1f0>
            // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLength = 2;
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__vector_23+0xd6>
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
 4f8:	93 e0       	ldi	r25, 0x03	; 3
 4fa:	90 93 09 01 	sts	0x0109, r25
            default:
                // Something bad happened
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 4fe:	90 91 0b 01 	lds	r25, 0x010B
 502:	40 91 09 01 	lds	r20, 0x0109
 506:	69 2f       	mov	r22, r25
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	24 2f       	mov	r18, r20
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	31 09       	sbc	r19, r1
 512:	62 17       	cp	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	c4 f0       	brlt	.+48     	; 0x548 <__vector_23+0x124>
        {
            // Reception complete
            mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 518:	82 95       	swap	r24
 51a:	8f 70       	andi	r24, 0x0F	; 15
 51c:	80 93 04 01 	sts	0x0104, r24
            mCompleteMessage.Data1 = mPendingMessage[0]; // status = channel + type
 520:	c0 93 05 01 	sts	0x0105, r28
 			mCompleteMessage.Data2 = mPendingMessage[1];
 524:	80 91 0e 01 	lds	r24, 0x010E
 528:	80 93 06 01 	sts	0x0106, r24

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 52c:	43 30       	cpi	r20, 0x03	; 3
 52e:	29 f4       	brne	.+10     	; 0x53a <__vector_23+0x116>
                mCompleteMessage.Data3 = mPendingMessage[2];
 530:	80 91 0f 01 	lds	r24, 0x010F
 534:	80 93 07 01 	sts	0x0107, r24
 538:	02 c0       	rjmp	.+4      	; 0x53e <__vector_23+0x11a>
            else
                mCompleteMessage.Data3 = 0;
 53a:	10 92 07 01 	sts	0x0107, r1

            mPendingMessageIndex = 0;
 53e:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 542:	10 92 09 01 	sts	0x0109, r1
 546:	1b c0       	rjmp	.+54     	; 0x57e <__vector_23+0x15a>
            return;
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
 548:	9f 5f       	subi	r25, 0xFF	; 255
 54a:	90 93 0b 01 	sts	0x010B, r25
 54e:	62 c0       	rjmp	.+196    	; 0x614 <__vector_23+0x1f0>
        }
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
 550:	c7 ff       	sbrs	r28, 7
 552:	19 c0       	rjmp	.+50     	; 0x586 <__vector_23+0x162>
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
 554:	cd 3f       	cpi	r28, 0xFD	; 253
 556:	28 f4       	brcc	.+10     	; 0x562 <__vector_23+0x13e>
 558:	ca 3f       	cpi	r28, 0xFA	; 250
 55a:	28 f4       	brcc	.+10     	; 0x566 <__vector_23+0x142>
 55c:	c8 3f       	cpi	r28, 0xF8	; 248
 55e:	99 f4       	brne	.+38     	; 0x586 <__vector_23+0x162>
 560:	02 c0       	rjmp	.+4      	; 0x566 <__vector_23+0x142>
 562:	ce 3f       	cpi	r28, 0xFE	; 254
 564:	80 f0       	brcs	.+32     	; 0x586 <__vector_23+0x162>
                    // pass it to the structure for being read outside
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.
           		 	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(extracted));
 566:	8c 2f       	mov	r24, r28
 568:	3d df       	rcall	.-390    	; 0x3e4 <getTypeFromStatusByte>
 56a:	82 95       	swap	r24
 56c:	8f 70       	andi	r24, 0x0F	; 15
 56e:	80 93 04 01 	sts	0x0104, r24
            		mCompleteMessage.Data1 = extracted;
 572:	c0 93 05 01 	sts	0x0105, r28
                    mCompleteMessage.Data2 = 0;
 576:	10 92 06 01 	sts	0x0106, r1
                    mCompleteMessage.Data3 = 0;
 57a:	10 92 07 01 	sts	0x0107, r1
                   	mPendingMessageValid   = true;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	80 93 08 01 	sts	0x0108, r24
                    return;
 584:	47 c0       	rjmp	.+142    	; 0x614 <__vector_23+0x1f0>
                    break;
            }
        }

        // Add extracted data byte to pending message
        mPendingMessage[mPendingMessageIndex] = extracted;
 586:	48 2f       	mov	r20, r24
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	fa 01       	movw	r30, r20
 58c:	e3 5f       	subi	r30, 0xF3	; 243
 58e:	fe 4f       	sbci	r31, 0xFE	; 254
 590:	c0 83       	st	Z, r28

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 592:	d0 91 09 01 	lds	r29, 0x0109
 596:	2d 2f       	mov	r18, r29
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	21 50       	subi	r18, 0x01	; 1
 59c:	31 09       	sbc	r19, r1
 59e:	42 17       	cp	r20, r18
 5a0:	53 07       	cpc	r21, r19
 5a2:	ac f1       	brlt	.+106    	; 0x60e <__vector_23+0x1ea>
        {

        	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 5a4:	c0 91 0d 01 	lds	r28, 0x010D
 5a8:	8c 2f       	mov	r24, r28
 5aa:	1c df       	rcall	.-456    	; 0x3e4 <getTypeFromStatusByte>
 5ac:	98 2f       	mov	r25, r24
 5ae:	92 95       	swap	r25
 5b0:	9f 70       	andi	r25, 0x0F	; 15
 5b2:	90 93 04 01 	sts	0x0104, r25
            mCompleteMessage.Data1 = mPendingMessage[0];
 5b6:	c0 93 05 01 	sts	0x0105, r28
            mCompleteMessage.Data2 = mPendingMessage[1];
 5ba:	90 91 0e 01 	lds	r25, 0x010E
 5be:	90 93 06 01 	sts	0x0106, r25

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 5c2:	d3 30       	cpi	r29, 0x03	; 3
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <__vector_23+0x1ac>
                mCompleteMessage.Data3 = mPendingMessage[2];
 5c6:	90 91 0f 01 	lds	r25, 0x010F
 5ca:	90 93 07 01 	sts	0x0107, r25
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <__vector_23+0x1b0>
            else
                mCompleteMessage.Data3 = 0;
 5d0:	10 92 07 01 	sts	0x0107, r1

            // Reset local variables
            mPendingMessageIndex = 0;
 5d4:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 5d8:	10 92 09 01 	sts	0x0109, r1
            mPendingMessageValid = true;
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	90 93 08 01 	sts	0x0108, r25

            // Activate running status (if enabled for the received type)
            switch (getTypeFromStatusByte(mPendingMessage[0]))
 5e2:	80 3b       	cpi	r24, 0xB0	; 176
 5e4:	71 f0       	breq	.+28     	; 0x602 <__vector_23+0x1de>
 5e6:	38 f4       	brcc	.+14     	; 0x5f6 <__vector_23+0x1d2>
 5e8:	80 39       	cpi	r24, 0x90	; 144
 5ea:	59 f0       	breq	.+22     	; 0x602 <__vector_23+0x1de>
 5ec:	80 3a       	cpi	r24, 0xA0	; 160
 5ee:	49 f0       	breq	.+18     	; 0x602 <__vector_23+0x1de>
 5f0:	80 38       	cpi	r24, 0x80	; 128
 5f2:	51 f4       	brne	.+20     	; 0x608 <__vector_23+0x1e4>
 5f4:	06 c0       	rjmp	.+12     	; 0x602 <__vector_23+0x1de>
 5f6:	80 3d       	cpi	r24, 0xD0	; 208
 5f8:	21 f0       	breq	.+8      	; 0x602 <__vector_23+0x1de>
 5fa:	80 3e       	cpi	r24, 0xE0	; 224
 5fc:	11 f0       	breq	.+4      	; 0x602 <__vector_23+0x1de>
 5fe:	80 3c       	cpi	r24, 0xC0	; 192
 600:	19 f4       	brne	.+6      	; 0x608 <__vector_23+0x1e4>
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
 602:	c0 93 0a 01 	sts	0x010A, r28
                    break;
 606:	06 c0       	rjmp	.+12     	; 0x614 <__vector_23+0x1f0>

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
 608:	10 92 0a 01 	sts	0x010A, r1
                    break;
 60c:	03 c0       	rjmp	.+6      	; 0x614 <__vector_23+0x1f0>
            return;
        }
        else
        {
            // Not complete? Then update the index of the pending message.
            mPendingMessageIndex++;
 60e:	8f 5f       	subi	r24, 0xFF	; 255
 610:	80 93 0b 01 	sts	0x010B, r24
        }
    }
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	bf 91       	pop	r27
 61e:	af 91       	pop	r26
 620:	9f 91       	pop	r25
 622:	8f 91       	pop	r24
 624:	7f 91       	pop	r23
 626:	6f 91       	pop	r22
 628:	5f 91       	pop	r21
 62a:	4f 91       	pop	r20
 62c:	3f 91       	pop	r19
 62e:	2f 91       	pop	r18
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 63a:	29 2f       	mov	r18, r25
 63c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 63e:	22 30       	cpi	r18, 0x02	; 2
 640:	31 05       	cpc	r19, r1
 642:	59 f0       	breq	.+22     	; 0x65a <CALLBACK_USB_GetDescriptor+0x20>
 644:	23 30       	cpi	r18, 0x03	; 3
 646:	31 05       	cpc	r19, r1
 648:	69 f0       	breq	.+26     	; 0x664 <CALLBACK_USB_GetDescriptor+0x2a>
 64a:	21 30       	cpi	r18, 0x01	; 1
 64c:	31 05       	cpc	r19, r1
 64e:	f9 f4       	brne	.+62     	; 0x68e <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 650:	82 e1       	ldi	r24, 0x12	; 18
 652:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 654:	25 ec       	ldi	r18, 0xC5	; 197
 656:	31 e0       	ldi	r19, 0x01	; 1
 658:	1e c0       	rjmp	.+60     	; 0x696 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 65a:	85 e6       	ldi	r24, 0x65	; 101
 65c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 65e:	20 e6       	ldi	r18, 0x60	; 96
 660:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 662:	19 c0       	rjmp	.+50     	; 0x696 <CALLBACK_USB_GetDescriptor+0x5c>
 664:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	91 05       	cpc	r25, r1
 66a:	41 f0       	breq	.+16     	; 0x67c <CALLBACK_USB_GetDescriptor+0x42>
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	91 05       	cpc	r25, r1
 670:	41 f0       	breq	.+16     	; 0x682 <CALLBACK_USB_GetDescriptor+0x48>
 672:	89 2b       	or	r24, r25
 674:	61 f4       	brne	.+24     	; 0x68e <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 676:	ec e5       	ldi	r30, 0x5C	; 92
 678:	f1 e0       	ldi	r31, 0x01	; 1
 67a:	05 c0       	rjmp	.+10     	; 0x686 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 67c:	e6 e8       	ldi	r30, 0x86	; 134
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 682:	e4 e7       	ldi	r30, 0x74	; 116
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	84 91       	lpm	r24, Z
 688:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 68a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 68c:	04 c0       	rjmp	.+8      	; 0x696 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 696:	fa 01       	movw	r30, r20
 698:	31 83       	std	Z+1, r19	; 0x01
 69a:	20 83       	st	Z, r18
	return Size;
}
 69c:	08 95       	ret

0000069e <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 69e:	cf 92       	push	r12
 6a0:	df 92       	push	r13
 6a2:	ef 92       	push	r14
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	ec 01       	movw	r28, r24
 6b0:	8b 01       	movw	r16, r22
 6b2:	7a 01       	movw	r14, r20
 6b4:	9a d1       	rcall	.+820    	; 0x9ea <Endpoint_WaitUntilReady>
 6b6:	81 11       	cpse	r24, r1
 6b8:	33 c0       	rjmp	.+102    	; 0x720 <Endpoint_Write_Stream_LE+0x82>
 6ba:	e1 14       	cp	r14, r1
 6bc:	f1 04       	cpc	r15, r1
 6be:	39 f0       	breq	.+14     	; 0x6ce <Endpoint_Write_Stream_LE+0x30>
 6c0:	f7 01       	movw	r30, r14
 6c2:	80 81       	ld	r24, Z
 6c4:	91 81       	ldd	r25, Z+1	; 0x01
 6c6:	08 1b       	sub	r16, r24
 6c8:	19 0b       	sbc	r17, r25
 6ca:	c8 0f       	add	r28, r24
 6cc:	d9 1f       	adc	r29, r25
 6ce:	c1 2c       	mov	r12, r1
 6d0:	d1 2c       	mov	r13, r1
 6d2:	01 15       	cp	r16, r1
 6d4:	11 05       	cpc	r17, r1
 6d6:	19 f1       	breq	.+70     	; 0x71e <Endpoint_Write_Stream_LE+0x80>
 6d8:	80 91 e8 00 	lds	r24, 0x00E8
 6dc:	85 fd       	sbrc	r24, 5
 6de:	16 c0       	rjmp	.+44     	; 0x70c <Endpoint_Write_Stream_LE+0x6e>
 6e0:	80 91 e8 00 	lds	r24, 0x00E8
 6e4:	8e 77       	andi	r24, 0x7E	; 126
 6e6:	80 93 e8 00 	sts	0x00E8, r24
 6ea:	f0 d3       	rcall	.+2016   	; 0xecc <USB_USBTask>
 6ec:	e1 14       	cp	r14, r1
 6ee:	f1 04       	cpc	r15, r1
 6f0:	49 f0       	breq	.+18     	; 0x704 <Endpoint_Write_Stream_LE+0x66>
 6f2:	f7 01       	movw	r30, r14
 6f4:	80 81       	ld	r24, Z
 6f6:	91 81       	ldd	r25, Z+1	; 0x01
 6f8:	c8 0e       	add	r12, r24
 6fa:	d9 1e       	adc	r13, r25
 6fc:	d1 82       	std	Z+1, r13	; 0x01
 6fe:	c0 82       	st	Z, r12
 700:	85 e0       	ldi	r24, 0x05	; 5
 702:	0e c0       	rjmp	.+28     	; 0x720 <Endpoint_Write_Stream_LE+0x82>
 704:	72 d1       	rcall	.+740    	; 0x9ea <Endpoint_WaitUntilReady>
 706:	88 23       	and	r24, r24
 708:	21 f3       	breq	.-56     	; 0x6d2 <Endpoint_Write_Stream_LE+0x34>
 70a:	0a c0       	rjmp	.+20     	; 0x720 <Endpoint_Write_Stream_LE+0x82>
 70c:	89 91       	ld	r24, Y+
 70e:	80 93 f1 00 	sts	0x00F1, r24
 712:	01 50       	subi	r16, 0x01	; 1
 714:	11 09       	sbc	r17, r1
 716:	ff ef       	ldi	r31, 0xFF	; 255
 718:	cf 1a       	sub	r12, r31
 71a:	df 0a       	sbc	r13, r31
 71c:	da cf       	rjmp	.-76     	; 0x6d2 <Endpoint_Write_Stream_LE+0x34>
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	ff 90       	pop	r15
 72a:	ef 90       	pop	r14
 72c:	df 90       	pop	r13
 72e:	cf 90       	pop	r12
 730:	08 95       	ret

00000732 <Endpoint_Read_Stream_LE>:
 732:	cf 92       	push	r12
 734:	df 92       	push	r13
 736:	ef 92       	push	r14
 738:	ff 92       	push	r15
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	ec 01       	movw	r28, r24
 744:	8b 01       	movw	r16, r22
 746:	7a 01       	movw	r14, r20
 748:	50 d1       	rcall	.+672    	; 0x9ea <Endpoint_WaitUntilReady>
 74a:	81 11       	cpse	r24, r1
 74c:	33 c0       	rjmp	.+102    	; 0x7b4 <Endpoint_Read_Stream_LE+0x82>
 74e:	e1 14       	cp	r14, r1
 750:	f1 04       	cpc	r15, r1
 752:	39 f0       	breq	.+14     	; 0x762 <Endpoint_Read_Stream_LE+0x30>
 754:	f7 01       	movw	r30, r14
 756:	80 81       	ld	r24, Z
 758:	91 81       	ldd	r25, Z+1	; 0x01
 75a:	08 1b       	sub	r16, r24
 75c:	19 0b       	sbc	r17, r25
 75e:	c8 0f       	add	r28, r24
 760:	d9 1f       	adc	r29, r25
 762:	c1 2c       	mov	r12, r1
 764:	d1 2c       	mov	r13, r1
 766:	01 15       	cp	r16, r1
 768:	11 05       	cpc	r17, r1
 76a:	19 f1       	breq	.+70     	; 0x7b2 <Endpoint_Read_Stream_LE+0x80>
 76c:	80 91 e8 00 	lds	r24, 0x00E8
 770:	85 fd       	sbrc	r24, 5
 772:	16 c0       	rjmp	.+44     	; 0x7a0 <Endpoint_Read_Stream_LE+0x6e>
 774:	80 91 e8 00 	lds	r24, 0x00E8
 778:	8b 77       	andi	r24, 0x7B	; 123
 77a:	80 93 e8 00 	sts	0x00E8, r24
 77e:	a6 d3       	rcall	.+1868   	; 0xecc <USB_USBTask>
 780:	e1 14       	cp	r14, r1
 782:	f1 04       	cpc	r15, r1
 784:	49 f0       	breq	.+18     	; 0x798 <Endpoint_Read_Stream_LE+0x66>
 786:	f7 01       	movw	r30, r14
 788:	80 81       	ld	r24, Z
 78a:	91 81       	ldd	r25, Z+1	; 0x01
 78c:	c8 0e       	add	r12, r24
 78e:	d9 1e       	adc	r13, r25
 790:	d1 82       	std	Z+1, r13	; 0x01
 792:	c0 82       	st	Z, r12
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	0e c0       	rjmp	.+28     	; 0x7b4 <Endpoint_Read_Stream_LE+0x82>
 798:	28 d1       	rcall	.+592    	; 0x9ea <Endpoint_WaitUntilReady>
 79a:	88 23       	and	r24, r24
 79c:	21 f3       	breq	.-56     	; 0x766 <Endpoint_Read_Stream_LE+0x34>
 79e:	0a c0       	rjmp	.+20     	; 0x7b4 <Endpoint_Read_Stream_LE+0x82>
 7a0:	80 91 f1 00 	lds	r24, 0x00F1
 7a4:	89 93       	st	Y+, r24
 7a6:	01 50       	subi	r16, 0x01	; 1
 7a8:	11 09       	sbc	r17, r1
 7aa:	ff ef       	ldi	r31, 0xFF	; 255
 7ac:	cf 1a       	sub	r12, r31
 7ae:	df 0a       	sbc	r13, r31
 7b0:	da cf       	rjmp	.-76     	; 0x766 <Endpoint_Read_Stream_LE+0x34>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	ff 90       	pop	r15
 7be:	ef 90       	pop	r14
 7c0:	df 90       	pop	r13
 7c2:	cf 90       	pop	r12
 7c4:	08 95       	ret

000007c6 <Endpoint_Write_Control_Stream_LE>:
 7c6:	20 91 1b 01 	lds	r18, 0x011B
 7ca:	30 91 1c 01 	lds	r19, 0x011C
 7ce:	26 17       	cp	r18, r22
 7d0:	37 07       	cpc	r19, r23
 7d2:	48 f0       	brcs	.+18     	; 0x7e6 <Endpoint_Write_Control_Stream_LE+0x20>
 7d4:	61 15       	cp	r22, r1
 7d6:	71 05       	cpc	r23, r1
 7d8:	39 f4       	brne	.+14     	; 0x7e8 <Endpoint_Write_Control_Stream_LE+0x22>
 7da:	20 91 e8 00 	lds	r18, 0x00E8
 7de:	2e 77       	andi	r18, 0x7E	; 126
 7e0:	20 93 e8 00 	sts	0x00E8, r18
 7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <Endpoint_Write_Control_Stream_LE+0x22>
 7e6:	b9 01       	movw	r22, r18
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	61 15       	cp	r22, r1
 7ec:	71 05       	cpc	r23, r1
 7ee:	91 f1       	breq	.+100    	; 0x854 <Endpoint_Write_Control_Stream_LE+0x8e>
 7f0:	20 91 14 01 	lds	r18, 0x0114
 7f4:	22 23       	and	r18, r18
 7f6:	09 f4       	brne	.+2      	; 0x7fa <Endpoint_Write_Control_Stream_LE+0x34>
 7f8:	40 c0       	rjmp	.+128    	; 0x87a <Endpoint_Write_Control_Stream_LE+0xb4>
 7fa:	25 30       	cpi	r18, 0x05	; 5
 7fc:	09 f4       	brne	.+2      	; 0x800 <Endpoint_Write_Control_Stream_LE+0x3a>
 7fe:	3f c0       	rjmp	.+126    	; 0x87e <Endpoint_Write_Control_Stream_LE+0xb8>
 800:	20 91 e8 00 	lds	r18, 0x00E8
 804:	23 fd       	sbrc	r18, 3
 806:	3d c0       	rjmp	.+122    	; 0x882 <Endpoint_Write_Control_Stream_LE+0xbc>
 808:	20 91 e8 00 	lds	r18, 0x00E8
 80c:	22 fd       	sbrc	r18, 2
 80e:	2f c0       	rjmp	.+94     	; 0x86e <Endpoint_Write_Control_Stream_LE+0xa8>
 810:	20 91 e8 00 	lds	r18, 0x00E8
 814:	20 ff       	sbrs	r18, 0
 816:	e9 cf       	rjmp	.-46     	; 0x7ea <Endpoint_Write_Control_Stream_LE+0x24>
 818:	20 91 f2 00 	lds	r18, 0x00F2
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	fc 01       	movw	r30, r24
 820:	cf 01       	movw	r24, r30
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	59 f0       	breq	.+22     	; 0x83e <Endpoint_Write_Control_Stream_LE+0x78>
 828:	28 30       	cpi	r18, 0x08	; 8
 82a:	31 05       	cpc	r19, r1
 82c:	40 f4       	brcc	.+16     	; 0x83e <Endpoint_Write_Control_Stream_LE+0x78>
 82e:	81 91       	ld	r24, Z+
 830:	80 93 f1 00 	sts	0x00F1, r24
 834:	61 50       	subi	r22, 0x01	; 1
 836:	71 09       	sbc	r23, r1
 838:	2f 5f       	subi	r18, 0xFF	; 255
 83a:	3f 4f       	sbci	r19, 0xFF	; 255
 83c:	f1 cf       	rjmp	.-30     	; 0x820 <Endpoint_Write_Control_Stream_LE+0x5a>
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	28 30       	cpi	r18, 0x08	; 8
 842:	31 05       	cpc	r19, r1
 844:	09 f0       	breq	.+2      	; 0x848 <Endpoint_Write_Control_Stream_LE+0x82>
 846:	40 e0       	ldi	r20, 0x00	; 0
 848:	20 91 e8 00 	lds	r18, 0x00E8
 84c:	2e 77       	andi	r18, 0x7E	; 126
 84e:	20 93 e8 00 	sts	0x00E8, r18
 852:	cb cf       	rjmp	.-106    	; 0x7ea <Endpoint_Write_Control_Stream_LE+0x24>
 854:	41 11       	cpse	r20, r1
 856:	cc cf       	rjmp	.-104    	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x2a>
 858:	0a c0       	rjmp	.+20     	; 0x86e <Endpoint_Write_Control_Stream_LE+0xa8>
 85a:	80 91 14 01 	lds	r24, 0x0114
 85e:	88 23       	and	r24, r24
 860:	61 f0       	breq	.+24     	; 0x87a <Endpoint_Write_Control_Stream_LE+0xb4>
 862:	85 30       	cpi	r24, 0x05	; 5
 864:	61 f0       	breq	.+24     	; 0x87e <Endpoint_Write_Control_Stream_LE+0xb8>
 866:	80 91 e8 00 	lds	r24, 0x00E8
 86a:	83 fd       	sbrc	r24, 3
 86c:	0a c0       	rjmp	.+20     	; 0x882 <Endpoint_Write_Control_Stream_LE+0xbc>
 86e:	80 91 e8 00 	lds	r24, 0x00E8
 872:	82 ff       	sbrs	r24, 2
 874:	f2 cf       	rjmp	.-28     	; 0x85a <Endpoint_Write_Control_Stream_LE+0x94>
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	08 95       	ret
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	08 95       	ret
 87e:	83 e0       	ldi	r24, 0x03	; 3
 880:	08 95       	ret
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	08 95       	ret

00000886 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 886:	20 91 1b 01 	lds	r18, 0x011B
 88a:	30 91 1c 01 	lds	r19, 0x011C
 88e:	26 17       	cp	r18, r22
 890:	37 07       	cpc	r19, r23
 892:	48 f0       	brcs	.+18     	; 0x8a6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 894:	61 15       	cp	r22, r1
 896:	71 05       	cpc	r23, r1
 898:	39 f4       	brne	.+14     	; 0x8a8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 89a:	20 91 e8 00 	lds	r18, 0x00E8
 89e:	2e 77       	andi	r18, 0x7E	; 126
 8a0:	20 93 e8 00 	sts	0x00E8, r18
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <Endpoint_Write_Control_PStream_LE+0x22>
 8a6:	b9 01       	movw	r22, r18
 8a8:	fc 01       	movw	r30, r24
 8aa:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8ac:	61 15       	cp	r22, r1
 8ae:	71 05       	cpc	r23, r1
 8b0:	79 f1       	breq	.+94     	; 0x910 <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8b2:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8b6:	88 23       	and	r24, r24
 8b8:	09 f4       	brne	.+2      	; 0x8bc <Endpoint_Write_Control_PStream_LE+0x36>
 8ba:	3d c0       	rjmp	.+122    	; 0x936 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8bc:	85 30       	cpi	r24, 0x05	; 5
 8be:	09 f4       	brne	.+2      	; 0x8c2 <Endpoint_Write_Control_PStream_LE+0x3c>
 8c0:	3c c0       	rjmp	.+120    	; 0x93a <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 8c6:	83 fd       	sbrc	r24, 3
 8c8:	3a c0       	rjmp	.+116    	; 0x93e <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 8ce:	82 fd       	sbrc	r24, 2
 8d0:	2c c0       	rjmp	.+88     	; 0x92a <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8d2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 8d6:	80 ff       	sbrs	r24, 0
 8d8:	e9 cf       	rjmp	.-46     	; 0x8ac <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 8da:	80 91 f2 00 	lds	r24, 0x00F2
 8de:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 8e0:	61 15       	cp	r22, r1
 8e2:	71 05       	cpc	r23, r1
 8e4:	59 f0       	breq	.+22     	; 0x8fc <Endpoint_Write_Control_PStream_LE+0x76>
 8e6:	88 30       	cpi	r24, 0x08	; 8
 8e8:	91 05       	cpc	r25, r1
 8ea:	40 f4       	brcc	.+16     	; 0x8fc <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 8ec:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 8ee:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 8f2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 8f4:	61 50       	subi	r22, 0x01	; 1
 8f6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	f2 cf       	rjmp	.-28     	; 0x8e0 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 8fc:	21 e0       	ldi	r18, 0x01	; 1
 8fe:	08 97       	sbiw	r24, 0x08	; 8
 900:	09 f0       	breq	.+2      	; 0x904 <Endpoint_Write_Control_PStream_LE+0x7e>
 902:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 904:	80 91 e8 00 	lds	r24, 0x00E8
 908:	8e 77       	andi	r24, 0x7E	; 126
 90a:	80 93 e8 00 	sts	0x00E8, r24
 90e:	ce cf       	rjmp	.-100    	; 0x8ac <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 910:	21 11       	cpse	r18, r1
 912:	cf cf       	rjmp	.-98     	; 0x8b2 <Endpoint_Write_Control_PStream_LE+0x2c>
 914:	0a c0       	rjmp	.+20     	; 0x92a <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 916:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 91a:	88 23       	and	r24, r24
 91c:	61 f0       	breq	.+24     	; 0x936 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 91e:	85 30       	cpi	r24, 0x05	; 5
 920:	61 f0       	breq	.+24     	; 0x93a <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 922:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 926:	83 fd       	sbrc	r24, 3
 928:	0a c0       	rjmp	.+20     	; 0x93e <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 92a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 92e:	82 ff       	sbrs	r24, 2
 930:	f2 cf       	rjmp	.-28     	; 0x916 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 936:	82 e0       	ldi	r24, 0x02	; 2
 938:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 93a:	83 e0       	ldi	r24, 0x03	; 3
 93c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 93e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 940:	08 95       	ret

00000942 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 942:	98 2f       	mov	r25, r24
 944:	95 30       	cpi	r25, 0x05	; 5
 946:	58 f5       	brcc	.+86     	; 0x99e <Endpoint_ConfigureEndpoint_Prv+0x5c>
 948:	90 93 e9 00 	sts	0x00E9, r25
 94c:	98 17       	cp	r25, r24
 94e:	39 f0       	breq	.+14     	; 0x95e <Endpoint_ConfigureEndpoint_Prv+0x1c>
 950:	70 91 ec 00 	lds	r23, 0x00EC
 954:	20 91 ed 00 	lds	r18, 0x00ED
 958:	50 91 f0 00 	lds	r21, 0x00F0
 95c:	03 c0       	rjmp	.+6      	; 0x964 <Endpoint_ConfigureEndpoint_Prv+0x22>
 95e:	24 2f       	mov	r18, r20
 960:	76 2f       	mov	r23, r22
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	21 ff       	sbrs	r18, 1
 966:	19 c0       	rjmp	.+50     	; 0x99a <Endpoint_ConfigureEndpoint_Prv+0x58>
 968:	30 91 eb 00 	lds	r19, 0x00EB
 96c:	3e 7f       	andi	r19, 0xFE	; 254
 96e:	30 93 eb 00 	sts	0x00EB, r19
 972:	30 91 ed 00 	lds	r19, 0x00ED
 976:	3d 7f       	andi	r19, 0xFD	; 253
 978:	30 93 ed 00 	sts	0x00ED, r19
 97c:	30 91 eb 00 	lds	r19, 0x00EB
 980:	31 60       	ori	r19, 0x01	; 1
 982:	30 93 eb 00 	sts	0x00EB, r19
 986:	70 93 ec 00 	sts	0x00EC, r23
 98a:	20 93 ed 00 	sts	0x00ED, r18
 98e:	50 93 f0 00 	sts	0x00F0, r21
 992:	20 91 ee 00 	lds	r18, 0x00EE
 996:	27 ff       	sbrs	r18, 7
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <Endpoint_ConfigureEndpoint_Prv+0x66>
 99a:	9f 5f       	subi	r25, 0xFF	; 255
 99c:	d3 cf       	rjmp	.-90     	; 0x944 <Endpoint_ConfigureEndpoint_Prv+0x2>
 99e:	8f 70       	andi	r24, 0x0F	; 15
 9a0:	80 93 e9 00 	sts	0x00E9, r24
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	08 95       	ret
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	08 95       	ret

000009ac <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 9ac:	80 91 15 01 	lds	r24, 0x0115
 9b0:	87 ff       	sbrs	r24, 7
 9b2:	11 c0       	rjmp	.+34     	; 0x9d6 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9b4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
 9b8:	82 fd       	sbrc	r24, 2
 9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 9bc:	80 91 14 01 	lds	r24, 0x0114
 9c0:	81 11       	cpse	r24, r1
 9c2:	f8 cf       	rjmp	.-16     	; 0x9b4 <Endpoint_ClearStatusStage+0x8>
 9c4:	11 c0       	rjmp	.+34     	; 0x9e8 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 9c6:	80 91 e8 00 	lds	r24, 0x00E8
 9ca:	8b 77       	andi	r24, 0x7B	; 123
 9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 9ce:	80 91 14 01 	lds	r24, 0x0114
 9d2:	88 23       	and	r24, r24
 9d4:	49 f0       	breq	.+18     	; 0x9e8 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9d6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 9da:	80 ff       	sbrs	r24, 0
 9dc:	f8 cf       	rjmp	.-16     	; 0x9ce <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9de:	80 91 e8 00 	lds	r24, 0x00E8
 9e2:	8e 77       	andi	r24, 0x7E	; 126
 9e4:	80 93 e8 00 	sts	0x00E8, r24
 9e8:	08 95       	ret

000009ea <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 9ea:	20 91 e4 00 	lds	r18, 0x00E4
 9ee:	30 91 e5 00 	lds	r19, 0x00E5
 9f2:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 9f4:	40 91 ec 00 	lds	r20, 0x00EC
 9f8:	84 2f       	mov	r24, r20
 9fa:	81 70       	andi	r24, 0x01	; 1
 9fc:	40 ff       	sbrs	r20, 0
 9fe:	22 c0       	rjmp	.+68     	; 0xa44 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a00:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 a04:	80 fd       	sbrc	r24, 0
 a06:	1c c0       	rjmp	.+56     	; 0xa40 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a08:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a0c:	88 23       	and	r24, r24
 a0e:	91 f0       	breq	.+36     	; 0xa34 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a10:	85 30       	cpi	r24, 0x05	; 5
 a12:	91 f0       	breq	.+36     	; 0xa38 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a14:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 a18:	85 fd       	sbrc	r24, 5
 a1a:	10 c0       	rjmp	.+32     	; 0xa3c <Endpoint_WaitUntilReady+0x52>
 a1c:	40 91 e4 00 	lds	r20, 0x00E4
 a20:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 a24:	42 17       	cp	r20, r18
 a26:	53 07       	cpc	r21, r19
 a28:	29 f3       	breq	.-54     	; 0x9f4 <Endpoint_WaitUntilReady+0xa>
 a2a:	9a 01       	movw	r18, r20
 a2c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 a2e:	11 f7       	brne	.-60     	; 0x9f4 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 a30:	84 e0       	ldi	r24, 0x04	; 4
 a32:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 a38:	83 e0       	ldi	r24, 0x03	; 3
 a3a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a44:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 a48:	42 ff       	sbrs	r20, 2
 a4a:	de cf       	rjmp	.-68     	; 0xa08 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 a4c:	08 95       	ret

00000a4e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 a4e:	41 d0       	rcall	.+130    	; 0xad2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 a50:	43 d0       	rcall	.+134    	; 0xad8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 a52:	80 91 d8 00 	lds	r24, 0x00D8
 a56:	8f 77       	andi	r24, 0x7F	; 127
 a58:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 a5c:	80 91 d8 00 	lds	r24, 0x00D8
 a60:	80 68       	ori	r24, 0x80	; 128
 a62:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a66:	80 91 d8 00 	lds	r24, 0x00D8
 a6a:	8f 7d       	andi	r24, 0xDF	; 223
 a6c:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a70:	84 e0       	ldi	r24, 0x04	; 4
 a72:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a74:	86 e0       	ldi	r24, 0x06	; 6
 a76:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a78:	09 b4       	in	r0, 0x29	; 41
 a7a:	00 fe       	sbrs	r0, 0
 a7c:	fd cf       	rjmp	.-6      	; 0xa78 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 a7e:	10 92 14 01 	sts	0x0114, r1
	USB_Device_ConfigurationNumber  = 0;
 a82:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 a86:	10 92 12 01 	sts	0x0112, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 a8a:	10 92 11 01 	sts	0x0111, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a8e:	42 e0       	ldi	r20, 0x02	; 2
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	56 df       	rcall	.-340    	; 0x942 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a96:	80 91 e1 00 	lds	r24, 0x00E1
 a9a:	8e 7f       	andi	r24, 0xFE	; 254
 a9c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 aa0:	80 91 e2 00 	lds	r24, 0x00E2
 aa4:	81 60       	ori	r24, 0x01	; 1
 aa6:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 aaa:	80 91 e2 00 	lds	r24, 0x00E2
 aae:	88 60       	ori	r24, 0x08	; 8
 ab0:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 ab4:	80 91 e0 00 	lds	r24, 0x00E0
 ab8:	8e 7f       	andi	r24, 0xFE	; 254
 aba:	80 93 e0 00 	sts	0x00E0, r24
 abe:	08 95       	ret

00000ac0 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 ac0:	e3 e6       	ldi	r30, 0x63	; 99
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	8e 7f       	andi	r24, 0xFE	; 254
 ac8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	80 93 13 01 	sts	0x0113, r24

	USB_ResetInterface();
 ad0:	be cf       	rjmp	.-132    	; 0xa4e <USB_ResetInterface>

00000ad2 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 ad2:	10 92 e2 00 	sts	0x00E2, r1
 ad6:	08 95       	ret

00000ad8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 ad8:	10 92 e1 00 	sts	0x00E1, r1
 adc:	08 95       	ret

00000ade <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 ade:	1f 92       	push	r1
 ae0:	0f 92       	push	r0
 ae2:	0f b6       	in	r0, 0x3f	; 63
 ae4:	0f 92       	push	r0
 ae6:	11 24       	eor	r1, r1
 ae8:	2f 93       	push	r18
 aea:	3f 93       	push	r19
 aec:	4f 93       	push	r20
 aee:	5f 93       	push	r21
 af0:	6f 93       	push	r22
 af2:	7f 93       	push	r23
 af4:	8f 93       	push	r24
 af6:	9f 93       	push	r25
 af8:	af 93       	push	r26
 afa:	bf 93       	push	r27
 afc:	ef 93       	push	r30
 afe:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 b00:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 b04:	82 ff       	sbrs	r24, 2
 b06:	0a c0       	rjmp	.+20     	; 0xb1c <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 b08:	80 91 e2 00 	lds	r24, 0x00E2
 b0c:	82 ff       	sbrs	r24, 2
 b0e:	06 c0       	rjmp	.+12     	; 0xb1c <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 b10:	80 91 e1 00 	lds	r24, 0x00E1
 b14:	8b 7f       	andi	r24, 0xFB	; 251
 b16:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 b1a:	d7 d1       	rcall	.+942    	; 0xeca <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 b1c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 b20:	80 ff       	sbrs	r24, 0
 b22:	17 c0       	rjmp	.+46     	; 0xb52 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 b24:	80 91 e2 00 	lds	r24, 0x00E2
 b28:	80 ff       	sbrs	r24, 0
 b2a:	13 c0       	rjmp	.+38     	; 0xb52 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b2c:	80 91 e2 00 	lds	r24, 0x00E2
 b30:	8e 7f       	andi	r24, 0xFE	; 254
 b32:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b36:	80 91 e2 00 	lds	r24, 0x00E2
 b3a:	80 61       	ori	r24, 0x10	; 16
 b3c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 b40:	80 91 d8 00 	lds	r24, 0x00D8
 b44:	80 62       	ori	r24, 0x20	; 32
 b46:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 b4a:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 b4c:	10 92 14 01 	sts	0x0114, r1
		EVENT_USB_Device_Disconnect();
 b50:	9a db       	rcall	.-2252   	; 0x286 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 b52:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 b56:	84 ff       	sbrs	r24, 4
 b58:	2f c0       	rjmp	.+94     	; 0xbb8 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 b5a:	80 91 e2 00 	lds	r24, 0x00E2
 b5e:	84 ff       	sbrs	r24, 4
 b60:	2b c0       	rjmp	.+86     	; 0xbb8 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 b62:	84 e0       	ldi	r24, 0x04	; 4
 b64:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 b66:	86 e0       	ldi	r24, 0x06	; 6
 b68:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 b6a:	09 b4       	in	r0, 0x29	; 41
 b6c:	00 fe       	sbrs	r0, 0
 b6e:	fd cf       	rjmp	.-6      	; 0xb6a <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 b70:	80 91 d8 00 	lds	r24, 0x00D8
 b74:	8f 7d       	andi	r24, 0xDF	; 223
 b76:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 b7a:	80 91 e1 00 	lds	r24, 0x00E1
 b7e:	8f 7e       	andi	r24, 0xEF	; 239
 b80:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 b84:	80 91 e2 00 	lds	r24, 0x00E2
 b88:	8f 7e       	andi	r24, 0xEF	; 239
 b8a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 b8e:	80 91 e2 00 	lds	r24, 0x00E2
 b92:	81 60       	ori	r24, 0x01	; 1
 b94:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 b98:	80 91 10 01 	lds	r24, 0x0110
 b9c:	88 23       	and	r24, r24
 b9e:	11 f0       	breq	.+4      	; 0xba4 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 ba0:	84 e0       	ldi	r24, 0x04	; 4
 ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ba4:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 ba8:	87 fd       	sbrc	r24, 7
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <__vector_11+0xd2>
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	01 c0       	rjmp	.+2      	; 0xbb2 <__vector_11+0xd4>
 bb0:	83 e0       	ldi	r24, 0x03	; 3
 bb2:	80 93 14 01 	sts	0x0114, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 bb6:	62 db       	rcall	.-2364   	; 0x27c <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 bb8:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 bbc:	83 ff       	sbrs	r24, 3
 bbe:	22 c0       	rjmp	.+68     	; 0xc04 <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 bc0:	80 91 e2 00 	lds	r24, 0x00E2
 bc4:	83 ff       	sbrs	r24, 3
 bc6:	1e c0       	rjmp	.+60     	; 0xc04 <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 bc8:	80 91 e1 00 	lds	r24, 0x00E1
 bcc:	87 7f       	andi	r24, 0xF7	; 247
 bce:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 bd2:	82 e0       	ldi	r24, 0x02	; 2
 bd4:	80 93 14 01 	sts	0x0114, r24
		USB_Device_ConfigurationNumber = 0;
 bd8:	10 92 10 01 	sts	0x0110, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 bdc:	80 91 e1 00 	lds	r24, 0x00E1
 be0:	8e 7f       	andi	r24, 0xFE	; 254
 be2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 be6:	80 91 e2 00 	lds	r24, 0x00E2
 bea:	8e 7f       	andi	r24, 0xFE	; 254
 bec:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 bf0:	80 91 e2 00 	lds	r24, 0x00E2
 bf4:	80 61       	ori	r24, 0x10	; 16
 bf6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 bfa:	42 e0       	ldi	r20, 0x02	; 2
 bfc:	60 e0       	ldi	r22, 0x00	; 0
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	a0 de       	rcall	.-704    	; 0x942 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 c02:	63 d1       	rcall	.+710    	; 0xeca <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 c04:	ff 91       	pop	r31
 c06:	ef 91       	pop	r30
 c08:	bf 91       	pop	r27
 c0a:	af 91       	pop	r26
 c0c:	9f 91       	pop	r25
 c0e:	8f 91       	pop	r24
 c10:	7f 91       	pop	r23
 c12:	6f 91       	pop	r22
 c14:	5f 91       	pop	r21
 c16:	4f 91       	pop	r20
 c18:	3f 91       	pop	r19
 c1a:	2f 91       	pop	r18
 c1c:	0f 90       	pop	r0
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	0f 90       	pop	r0
 c22:	1f 90       	pop	r1
 c24:	18 95       	reti

00000c26 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 c26:	1f 93       	push	r17
 c28:	cf 93       	push	r28
 c2a:	df 93       	push	r29
 c2c:	cd b7       	in	r28, 0x3d	; 61
 c2e:	de b7       	in	r29, 0x3e	; 62
 c30:	aa 97       	sbiw	r28, 0x2a	; 42
 c32:	0f b6       	in	r0, 0x3f	; 63
 c34:	f8 94       	cli
 c36:	de bf       	out	0x3e, r29	; 62
 c38:	0f be       	out	0x3f, r0	; 63
 c3a:	cd bf       	out	0x3d, r28	; 61
 c3c:	e5 e1       	ldi	r30, 0x15	; 21
 c3e:	f1 e0       	ldi	r31, 0x01	; 1
 c40:	88 e0       	ldi	r24, 0x08	; 8
 c42:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c44:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 c48:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 c4a:	8e 13       	cpse	r24, r30
 c4c:	fb cf       	rjmp	.-10     	; 0xc44 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 c4e:	3d d1       	rcall	.+634    	; 0xeca <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c50:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 c54:	83 ff       	sbrs	r24, 3
 c56:	21 c1       	rjmp	.+578    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 c58:	80 91 15 01 	lds	r24, 0x0115

		switch (USB_ControlRequest.bRequest)
 c5c:	90 91 16 01 	lds	r25, 0x0116
 c60:	95 30       	cpi	r25, 0x05	; 5
 c62:	09 f4       	brne	.+2      	; 0xc66 <USB_Device_ProcessControlRequest+0x40>
 c64:	78 c0       	rjmp	.+240    	; 0xd56 <USB_Device_ProcessControlRequest+0x130>
 c66:	30 f4       	brcc	.+12     	; 0xc74 <USB_Device_ProcessControlRequest+0x4e>
 c68:	91 30       	cpi	r25, 0x01	; 1
 c6a:	81 f1       	breq	.+96     	; 0xccc <USB_Device_ProcessControlRequest+0xa6>
 c6c:	68 f0       	brcs	.+26     	; 0xc88 <USB_Device_ProcessControlRequest+0x62>
 c6e:	93 30       	cpi	r25, 0x03	; 3
 c70:	69 f1       	breq	.+90     	; 0xccc <USB_Device_ProcessControlRequest+0xa6>
 c72:	13 c1       	rjmp	.+550    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
 c74:	98 30       	cpi	r25, 0x08	; 8
 c76:	09 f4       	brne	.+2      	; 0xc7a <USB_Device_ProcessControlRequest+0x54>
 c78:	e2 c0       	rjmp	.+452    	; 0xe3e <USB_Device_ProcessControlRequest+0x218>
 c7a:	99 30       	cpi	r25, 0x09	; 9
 c7c:	09 f4       	brne	.+2      	; 0xc80 <USB_Device_ProcessControlRequest+0x5a>
 c7e:	f1 c0       	rjmp	.+482    	; 0xe62 <USB_Device_ProcessControlRequest+0x23c>
 c80:	96 30       	cpi	r25, 0x06	; 6
 c82:	09 f0       	breq	.+2      	; 0xc86 <USB_Device_ProcessControlRequest+0x60>
 c84:	0a c1       	rjmp	.+532    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
 c86:	89 c0       	rjmp	.+274    	; 0xd9a <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c88:	80 38       	cpi	r24, 0x80	; 128
 c8a:	81 f0       	breq	.+32     	; 0xcac <USB_Device_ProcessControlRequest+0x86>
 c8c:	82 38       	cpi	r24, 0x82	; 130
 c8e:	09 f0       	breq	.+2      	; 0xc92 <USB_Device_ProcessControlRequest+0x6c>
 c90:	04 c1       	rjmp	.+520    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c92:	80 91 19 01 	lds	r24, 0x0119
 c96:	8f 70       	andi	r24, 0x0F	; 15
 c98:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 c9c:	80 91 eb 00 	lds	r24, 0x00EB
 ca0:	85 fb       	bst	r24, 5
 ca2:	88 27       	eor	r24, r24
 ca4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ca6:	10 92 e9 00 	sts	0x00E9, r1
 caa:	06 c0       	rjmp	.+12     	; 0xcb8 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 cac:	80 91 11 01 	lds	r24, 0x0111
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 cb0:	90 91 12 01 	lds	r25, 0x0112
 cb4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 cb6:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb8:	90 91 e8 00 	lds	r25, 0x00E8
 cbc:	97 7f       	andi	r25, 0xF7	; 247
 cbe:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 cc2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 cc6:	10 92 f1 00 	sts	0x00F1, r1
 cca:	c4 c0       	rjmp	.+392    	; 0xe54 <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ccc:	28 2f       	mov	r18, r24
 cce:	2d 7f       	andi	r18, 0xFD	; 253
 cd0:	09 f0       	breq	.+2      	; 0xcd4 <USB_Device_ProcessControlRequest+0xae>
 cd2:	e3 c0       	rjmp	.+454    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 cd4:	88 23       	and	r24, r24
 cd6:	19 f0       	breq	.+6      	; 0xcde <USB_Device_ProcessControlRequest+0xb8>
 cd8:	82 30       	cpi	r24, 0x02	; 2
 cda:	61 f0       	breq	.+24     	; 0xcf4 <USB_Device_ProcessControlRequest+0xce>
 cdc:	de c0       	rjmp	.+444    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 cde:	80 91 17 01 	lds	r24, 0x0117
 ce2:	81 30       	cpi	r24, 0x01	; 1
 ce4:	09 f0       	breq	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0xc2>
 ce6:	d9 c0       	rjmp	.+434    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ce8:	93 30       	cpi	r25, 0x03	; 3
 cea:	09 f0       	breq	.+2      	; 0xcee <USB_Device_ProcessControlRequest+0xc8>
 cec:	80 e0       	ldi	r24, 0x00	; 0
 cee:	80 93 12 01 	sts	0x0112, r24
 cf2:	2b c0       	rjmp	.+86     	; 0xd4a <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 cf4:	80 91 17 01 	lds	r24, 0x0117
 cf8:	81 11       	cpse	r24, r1
 cfa:	27 c0       	rjmp	.+78     	; 0xd4a <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 cfc:	80 91 19 01 	lds	r24, 0x0119
 d00:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 d02:	09 f4       	brne	.+2      	; 0xd06 <USB_Device_ProcessControlRequest+0xe0>
 d04:	ca c0       	rjmp	.+404    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d06:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 d0a:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 d0e:	20 ff       	sbrs	r18, 0
 d10:	1c c0       	rjmp	.+56     	; 0xd4a <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 d12:	93 30       	cpi	r25, 0x03	; 3
 d14:	21 f4       	brne	.+8      	; 0xd1e <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d16:	80 91 eb 00 	lds	r24, 0x00EB
 d1a:	80 62       	ori	r24, 0x20	; 32
 d1c:	14 c0       	rjmp	.+40     	; 0xd46 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 d1e:	90 91 eb 00 	lds	r25, 0x00EB
 d22:	90 61       	ori	r25, 0x10	; 16
 d24:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 d28:	21 e0       	ldi	r18, 0x01	; 1
 d2a:	30 e0       	ldi	r19, 0x00	; 0
 d2c:	a9 01       	movw	r20, r18
 d2e:	02 c0       	rjmp	.+4      	; 0xd34 <USB_Device_ProcessControlRequest+0x10e>
 d30:	44 0f       	add	r20, r20
 d32:	55 1f       	adc	r21, r21
 d34:	8a 95       	dec	r24
 d36:	e2 f7       	brpl	.-8      	; 0xd30 <USB_Device_ProcessControlRequest+0x10a>
 d38:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
 d3c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 d40:	80 91 eb 00 	lds	r24, 0x00EB
 d44:	88 60       	ori	r24, 0x08	; 8
 d46:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d4a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d4e:	80 91 e8 00 	lds	r24, 0x00E8
 d52:	87 7f       	andi	r24, 0xF7	; 247
 d54:	82 c0       	rjmp	.+260    	; 0xe5a <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d56:	81 11       	cpse	r24, r1
 d58:	a0 c0       	rjmp	.+320    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 d5a:	10 91 17 01 	lds	r17, 0x0117
 d5e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 d60:	80 91 e3 00 	lds	r24, 0x00E3
 d64:	80 78       	andi	r24, 0x80	; 128
 d66:	81 2b       	or	r24, r17
 d68:	80 93 e3 00 	sts	0x00E3, r24
 d6c:	80 91 e8 00 	lds	r24, 0x00E8
 d70:	87 7f       	andi	r24, 0xF7	; 247
 d72:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d76:	1a de       	rcall	.-972    	; 0x9ac <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d78:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 d7c:	80 ff       	sbrs	r24, 0
 d7e:	fc cf       	rjmp	.-8      	; 0xd78 <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 d80:	80 91 e3 00 	lds	r24, 0x00E3
 d84:	80 68       	ori	r24, 0x80	; 128
 d86:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 d8a:	11 11       	cpse	r17, r1
 d8c:	02 c0       	rjmp	.+4      	; 0xd92 <USB_Device_ProcessControlRequest+0x16c>
 d8e:	82 e0       	ldi	r24, 0x02	; 2
 d90:	01 c0       	rjmp	.+2      	; 0xd94 <USB_Device_ProcessControlRequest+0x16e>
 d92:	83 e0       	ldi	r24, 0x03	; 3
 d94:	80 93 14 01 	sts	0x0114, r24
 d98:	80 c0       	rjmp	.+256    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d9a:	80 58       	subi	r24, 0x80	; 128
 d9c:	82 30       	cpi	r24, 0x02	; 2
 d9e:	08 f0       	brcs	.+2      	; 0xda2 <USB_Device_ProcessControlRequest+0x17c>
 da0:	7c c0       	rjmp	.+248    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 da2:	80 91 17 01 	lds	r24, 0x0117
 da6:	90 91 18 01 	lds	r25, 0x0118
 daa:	8c 3d       	cpi	r24, 0xDC	; 220
 dac:	53 e0       	ldi	r21, 0x03	; 3
 dae:	95 07       	cpc	r25, r21
 db0:	71 f5       	brne	.+92     	; 0xe0e <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 db2:	83 e0       	ldi	r24, 0x03	; 3
 db4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 db6:	8a e2       	ldi	r24, 0x2A	; 42
 db8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 dba:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 dbc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 dbe:	de 01       	movw	r26, r28
 dc0:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 dc2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 dc4:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 dc6:	51 e2       	ldi	r21, 0x21	; 33
 dc8:	e3 2f       	mov	r30, r19
 dca:	f0 e0       	ldi	r31, 0x00	; 0
 dcc:	50 93 57 00 	sts	0x0057, r21
 dd0:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 dd2:	20 ff       	sbrs	r18, 0
 dd4:	03 c0       	rjmp	.+6      	; 0xddc <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
 dd6:	e2 95       	swap	r30
 dd8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 dda:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 ddc:	ef 70       	andi	r30, 0x0F	; 15
 dde:	8e 2f       	mov	r24, r30
 de0:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 de2:	ea 30       	cpi	r30, 0x0A	; 10
 de4:	10 f0       	brcs	.+4      	; 0xdea <USB_Device_ProcessControlRequest+0x1c4>
 de6:	c7 96       	adiw	r24, 0x37	; 55
 de8:	01 c0       	rjmp	.+2      	; 0xdec <USB_Device_ProcessControlRequest+0x1c6>
 dea:	c0 96       	adiw	r24, 0x30	; 48
 dec:	8d 93       	st	X+, r24
 dee:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	24 31       	cpi	r18, 0x14	; 20
 df4:	49 f7       	brne	.-46     	; 0xdc8 <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 df6:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 df8:	80 91 e8 00 	lds	r24, 0x00E8
 dfc:	87 7f       	andi	r24, 0xF7	; 247
 dfe:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 e02:	6a e2       	ldi	r22, 0x2A	; 42
 e04:	70 e0       	ldi	r23, 0x00	; 0
 e06:	ce 01       	movw	r24, r28
 e08:	01 96       	adiw	r24, 0x01	; 1
 e0a:	dd dc       	rcall	.-1606   	; 0x7c6 <Endpoint_Write_Control_Stream_LE>
 e0c:	12 c0       	rjmp	.+36     	; 0xe32 <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 e0e:	ae 01       	movw	r20, r28
 e10:	4f 5f       	subi	r20, 0xFF	; 255
 e12:	5f 4f       	sbci	r21, 0xFF	; 255
 e14:	60 91 19 01 	lds	r22, 0x0119
 e18:	10 dc       	rcall	.-2016   	; 0x63a <CALLBACK_USB_GetDescriptor>
 e1a:	bc 01       	movw	r22, r24
 e1c:	89 2b       	or	r24, r25
 e1e:	09 f4       	brne	.+2      	; 0xe22 <USB_Device_ProcessControlRequest+0x1fc>
 e20:	3c c0       	rjmp	.+120    	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
 e22:	90 91 e8 00 	lds	r25, 0x00E8
 e26:	97 7f       	andi	r25, 0xF7	; 247
 e28:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 e2c:	89 81       	ldd	r24, Y+1	; 0x01
 e2e:	9a 81       	ldd	r25, Y+2	; 0x02
 e30:	2a dd       	rcall	.-1452   	; 0x886 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e32:	80 91 e8 00 	lds	r24, 0x00E8
 e36:	8b 77       	andi	r24, 0x7B	; 123
 e38:	80 93 e8 00 	sts	0x00E8, r24
 e3c:	2e c0       	rjmp	.+92     	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 e3e:	80 38       	cpi	r24, 0x80	; 128
 e40:	61 f5       	brne	.+88     	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e42:	80 91 e8 00 	lds	r24, 0x00E8
 e46:	87 7f       	andi	r24, 0xF7	; 247
 e48:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 e4c:	80 91 10 01 	lds	r24, 0x0110
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e50:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e54:	80 91 e8 00 	lds	r24, 0x00E8
 e58:	8e 77       	andi	r24, 0x7E	; 126
 e5a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 e5e:	a6 dd       	rcall	.-1204   	; 0x9ac <Endpoint_ClearStatusStage>
 e60:	1c c0       	rjmp	.+56     	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e62:	81 11       	cpse	r24, r1
 e64:	1a c0       	rjmp	.+52     	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e66:	90 91 17 01 	lds	r25, 0x0117
 e6a:	92 30       	cpi	r25, 0x02	; 2
 e6c:	b0 f4       	brcc	.+44     	; 0xe9a <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e6e:	80 91 e8 00 	lds	r24, 0x00E8
 e72:	87 7f       	andi	r24, 0xF7	; 247
 e74:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e78:	90 93 10 01 	sts	0x0110, r25

	Endpoint_ClearStatusStage();
 e7c:	97 dd       	rcall	.-1234   	; 0x9ac <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 e7e:	80 91 10 01 	lds	r24, 0x0110
 e82:	81 11       	cpse	r24, r1
 e84:	06 c0       	rjmp	.+12     	; 0xe92 <USB_Device_ProcessControlRequest+0x26c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 e86:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e8a:	87 fd       	sbrc	r24, 7
 e8c:	02 c0       	rjmp	.+4      	; 0xe92 <USB_Device_ProcessControlRequest+0x26c>
 e8e:	81 e0       	ldi	r24, 0x01	; 1
 e90:	01 c0       	rjmp	.+2      	; 0xe94 <USB_Device_ProcessControlRequest+0x26e>
 e92:	84 e0       	ldi	r24, 0x04	; 4
 e94:	80 93 14 01 	sts	0x0114, r24

	EVENT_USB_Device_ConfigurationChanged();
 e98:	fb d9       	rcall	.-3082   	; 0x290 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e9a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 e9e:	83 ff       	sbrs	r24, 3
 ea0:	0a c0       	rjmp	.+20     	; 0xeb6 <USB_Device_ProcessControlRequest+0x290>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ea2:	80 91 e8 00 	lds	r24, 0x00E8
 ea6:	87 7f       	andi	r24, 0xF7	; 247
 ea8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 eac:	80 91 eb 00 	lds	r24, 0x00EB
 eb0:	80 62       	ori	r24, 0x20	; 32
 eb2:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 eb6:	aa 96       	adiw	r28, 0x2a	; 42
 eb8:	0f b6       	in	r0, 0x3f	; 63
 eba:	f8 94       	cli
 ebc:	de bf       	out	0x3e, r29	; 62
 ebe:	0f be       	out	0x3f, r0	; 63
 ec0:	cd bf       	out	0x3d, r28	; 61
 ec2:	df 91       	pop	r29
 ec4:	cf 91       	pop	r28
 ec6:	1f 91       	pop	r17
 ec8:	08 95       	ret

00000eca <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 eca:	08 95       	ret

00000ecc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ecc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 ece:	80 91 14 01 	lds	r24, 0x0114
 ed2:	88 23       	and	r24, r24
 ed4:	99 f0       	breq	.+38     	; 0xefc <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ed6:	c0 91 e9 00 	lds	r28, 0x00E9
 eda:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 edc:	90 91 ec 00 	lds	r25, 0x00EC
 ee0:	89 2f       	mov	r24, r25
 ee2:	81 70       	andi	r24, 0x01	; 1
 ee4:	90 fd       	sbrc	r25, 0
 ee6:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ee8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 eea:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 eee:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ef2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 ef4:	98 de       	rcall	.-720    	; 0xc26 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ef6:	cf 70       	andi	r28, 0x0F	; 15
 ef8:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 efc:	cf 91       	pop	r28
 efe:	08 95       	ret

00000f00 <_exit>:
 f00:	f8 94       	cli

00000f02 <__stop_program>:
 f02:	ff cf       	rjmp	.-2      	; 0xf02 <__stop_program>
